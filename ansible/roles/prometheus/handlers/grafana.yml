- name: Check grafana datasource
  listen: Setup grafana
  ansible.builtin.stat:
    path: /var/grafana/grafana_conf/provisioning/datasources/{{ ansible_play_hosts[0] }}_vmprom.yml
  delegate_to: "{{ item }}"
  with_items: "{{ groups['grafana'] }}"
  register: grafana_datasource

- name: Set grafana datasource exists default
  listen: Restart prometheus
  ansible.builtin.set_fact:
    need_grafana_update: false

- name: Set grafana datasource exists
  listen: Restart prometheus
  ansible.builtin.set_fact:
    need_grafana_update: true
  loop_control:
    index_var: index
  with_items: "{{ groups['grafana'] }}"
  when: not grafana_datasource.results[0].stat.exists and item != ansible_play_hosts[0]

- name: Make datasource.yml
  listen: Update grafana
  become: true
  ansible.builtin.template:
    src: datasource.yml
    dest: /var/grafana/grafana_conf/provisioning/datasources/{{ ansible_play_hosts[0] }}_influxdb.yml
    mode: "0644"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['grafana'] }}"
  when: item != ansible_play_hosts[0]
  notify: Restart Grafana

- name: Restart Grafana
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      docker compose -f /var/grafana/compose.yml down || :
      docker compose -f /var/grafana/compose.yml up -d --build
    chdir: /var/grafana
  delegate_to: "{{ item }}"
  with_items: "{{ groups['grafana'] }}"
  when: item != ansible_play_hosts[0]
  changed_when: true
